<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"> 
 <PropertyGroup>
    <BattleTechDir>D:\Steam\steamapps\common\BATTLETECH</BattleTechDir>
    <BattleTechModsDir>$(BattleTechDir)\Mods</BattleTechModsDir>
    <BattleTechManagedDir>$(BattleTechDir)\BattleTech_Data\Managed</BattleTechManagedDir>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="0Harmony">
      <HintPath>$(BattleTechManagedDir)\0Harmony.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Assembly-CSharp">
      <HintPath>$(BattleTechManagedDir)\Assembly-CSharp.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Mono.CSharp">
      <HintPath>..\Mono.CSharp.dll</HintPath>
    </Reference>
     <Reference Include="UnityEngine">
      <HintPath>$(BattleTechManagedDir)\UnityEngine.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.Networking">
      <HintPath>$(BattleTechManagedDir)\UnityEngine.Networking.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.UI">
      <HintPath>$(BattleTechManagedDir)\UnityEngine.UI.dll</HintPath>
    </Reference>
  </ItemGroup>
 <ItemGroup>  
      <ModDll Include="$(TargetDir)$(TargetName).dll;$(ProjectDir)..\Mono.CSharp.dll"/>  
      <ModFiles Include="$(ProjectDir)..\mod.json"/>  
  </ItemGroup>
  <Target Name="CopyFiles" AfterTargets="Build">
      <Copy  
        SourceFiles="@(ModFiles)"  
        DestinationFolder="$(BattleTechModsDir)\$(TargetName)\"
        Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' "
      />
      <Copy  
        SourceFiles="@(ModDll)"  
        DestinationFolder="$(BattleTechModsDir)\"
        Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' "
      />
      <Zip 
          InputFileNames="@(ModFiles)"
          OutputFileName="$(TargetDir)\$(TargetName).zip"
          Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' "
      />
  </Target>
   <UsingTask TaskName="Zip" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <InputFileNames ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <OutputFileName ParameterType="System.String" Required="true" />
      <OverwriteExistingFile ParameterType="System.Boolean" Required="false" />
	</ParameterGroup>
    <Task>
      <Reference Include="System.IO.Compression" />
      <Using Namespace="System.IO.Compression" />
      <Code Type="Fragment" Language="cs">
      <![CDATA[        
        var fileMode = OverwriteExistingFile ? FileMode.Create : FileMode.CreateNew;
        using (var archive = new ZipArchive(new FileStream(OutputFileName, fileMode), ZipArchiveMode.Create))
        {
            foreach (var inputFileName in InputFileNames.Select(f => f.ItemSpec))
            {
                var archiveEntry = archive.CreateEntry(Path.GetFileName(inputFileName));
                using (var fs = new FileStream(inputFileName, FileMode.Open))
                {
                    using (var zipStream = archiveEntry.Open())
                    {
                        fs.CopyTo(zipStream);
                    }
                }
            }
        }
      ]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask TaskName="ZipDir" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <InputBaseDirectory ParameterType="System.String" Required="true" />
      <OutputFileName ParameterType="System.String" Required="true" />
      <OverwriteExistingFile ParameterType="System.Boolean" Required="false" />
      <IncludeBaseDirectory ParameterType="System.Boolean" Required="false" />
	</ParameterGroup>
    <Task>
      <Reference Include="System.IO.Compression" />
      <Reference Include="System.IO.Compression.FileSystem" />
      <Using Namespace="System.IO.Compression" />
      <Code Type="Fragment" Language="cs">
      <![CDATA[        
        if (File.Exists(OutputFileName))
        {
            if (!OverwriteExistingFile)
            {
                return false;
            }
            File.Delete(OutputFileName);
        }
        ZipFile.CreateFromDirectory
        (
            InputBaseDirectory, OutputFileName, 
            CompressionLevel.Optimal, IncludeBaseDirectory
        );
      ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>